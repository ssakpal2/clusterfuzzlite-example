python infra/helper.py build_fuzzers --external $PATH_TO_PROJECT --sanitizer address
INFO:__main__:Running: docker build -t gcr.io/oss-fuzz/clusterfuzzlite-example --file /media/shared_file_system/Learning_Materials/SS23/thesis/clusterfuzzlite-example/.clusterfuzzlite/Dockerfile /media/shared_file_system/Learning_Materials/SS23/thesis/clusterfuzzlite-example.
[+] Building 0.1s (9/9) FINISHED                                                                                             docker:default
 => [internal] load .dockerignore                                                                                                      0.0s
 => => transferring context: 2B                                                                                                        0.0s
 => [internal] load build definition from Dockerfile                                                                                   0.0s
 => => transferring dockerfile: 843B                                                                                                   0.0s
 => [internal] load metadata for gcr.io/oss-fuzz-base/base-builder:latest                                                              0.0s
 => [1/4] FROM gcr.io/oss-fuzz-base/base-builder                                                                                       0.0s
 => [internal] load build context                                                                                                      0.0s
 => => transferring context: 30.48kB                                                                                                   0.0s
 => CACHED [2/4] COPY . /src/clusterfuzzlite-example                                                                                   0.0s
 => CACHED [3/4] WORKDIR clusterfuzzlite-example                                                                                       0.0s
 => CACHED [4/4] COPY .clusterfuzzlite/build.sh /src/                                                                                  0.0s
 => exporting to image                                                                                                                 0.0s
 => => exporting layers                                                                                                                0.0s
 => => writing image sha256:4fddd086e32ea10e9ad9596fc74750a5d0b7c1e1b6b9d93abb96a9b4526277bf                                           0.0s
 => => naming to gcr.io/oss-fuzz/clusterfuzzlite-example                                                                               0.0s
INFO:__main__:Keeping existing build artifacts as-is (if any).
WARNING:__main__:No project.yaml. Assuming c++.
WARNING:__main__:No project.yaml. Assuming c++.
INFO:__main__:Running: docker run --rm --privileged --shm-size=2g --platform linux/amd64 -i -e FUZZING_ENGINE=libfuzzer -e SANITIZER=address -e ARCHITECTURE=x86_64 -e PROJECT_NAME=clusterfuzzlite-example -e HELPER=True -e FUZZING_LANGUAGE=c++ -v /media/shared_file_system/Learning_Materials/SS23/thesis/oss-fuzz/build/out/clusterfuzzlite-example/:/out -v /media/shared_file_system/Learning_Materials/SS23/thesis/oss-fuzz/build/work/clusterfuzzlite-example:/work -t gcr.io/oss-fuzz/clusterfuzzlite-example.
---------------------------------------------------------------
Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
---------------------------------------------------------------
CC=clang
CXX=clang++
CFLAGS=-O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link
CXXFLAGS=-O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
RUSTFLAGS=--cfg fuzzing -Zsanitizer=address -Cdebuginfo=1 -Cforce-frame-pointers
---------------------------------------------------------------
+ cmake .
-- The C compiler identification is Clang 15.0.0
-- The CXX compiler identification is Clang 15.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/local/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/local/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
CMake Warning (dev) at CMakeLists.txt:36 (add_executable):
  Policy CMP0115 is not set: Source file extensions must be explicit.  Run
  "cmake --help-policy CMP0115" for policy details.  Use the cmake_policy
  command to set the policy and suppress this warning.

  File:

    /src/clusterfuzzlite-example/standalone_fuzz_target_runner.cpp
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done
-- Build files have been written to: /src/clusterfuzzlite-example
+ cmake --build .
[ 20%] Building CXX object CMakeFiles/my_api.dir/my_api.cpp.o
[ 40%] Linking CXX static library libmy_api.a
[ 40%] Built target my_api
[ 60%] Building CXX object CMakeFiles/do_stuff_fuzzer.dir/standalone_fuzz_target_runner.cpp.o
[ 80%] Building CXX object CMakeFiles/do_stuff_fuzzer.dir/do_stuff_fuzzer.cpp.o
[100%] Linking CXX executable do_stuff_fuzzer
[100%] Built target do_stuff_fuzzer
+ find . -name '*_fuzzer' -exec cp -v '{}' /out ';'
'./build/do_stuff_fuzzer' -> '/out/do_stuff_fuzzer'
'./do_stuff_fuzzer' -> '/out/do_stuff_fuzzer'
+ find . -name '*_fuzzer.dict' -exec cp -v '{}' /out ';'
'./do_another_stuff_fuzzer.dict' -> '/out/do_another_stuff_fuzzer.dict'
'./do_stuff_fuzzer.dict' -> '/out/do_stuff_fuzzer.dict'
+ find . -name '*_fuzzer.options' -exec cp -v '{}' /out ';'
